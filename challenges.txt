
Challenge part 1:
1. Initialize state with the default value of the
   array pulled in from boxes.js
2. Map over that state array and display each one
   as an empty square (black border, transparent bg color)
   (Don't worry about using the "on" property yet)


Challenge part 2:
1. Create a separate component called "Box" and
   replace the `div` above with our <Box /> components
2. Pass the Box component a prop called `on` with the
   value of the same name from the `boxes` objects
3. In the Box component, apply dynamic styles to determine
   the backgroundColor of the box. If it's `on`, set the
   backgroundColor to "#222222". If off, set it to "none"



Challenge 3.1: Create state controlling whether
this box is "on" or "off". Use the incoming
`props.on` to determine the initial state.

Create an event listener so when the box is clicked,
it toggles from "on" to "off".

Goal: clicking each box should toggle it on and off.


    /**
     * Challenge 3.2: Create a toggle() function that logs
     * "clicked!" to the console
     * 
     * Pass that function down to each of the Box components
     * and set it up so when they get clicked it runs the function
     */

             /**
         * Challenge 4: use setSquares to update the
         * correct square in the array.
         * 
         * Make sure not to directly modify state!
         * 
         * Hint: look back at the lesson on updating arrays
         * in state if you need a reminder on how to do this
         */